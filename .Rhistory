## days ##
(end-start)/7  #weeks
start <-  strptime("04/10/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("16/05/15 14:00", "%d/%m/%y %H:%M")
end - start
## days ##
2+ (end-start)/7  #weeks
p2
0+100
100-200
100+600
500+500=
start <-  strptime("04/10/14 14:00", "%d/%m/%y %H:%M")oophrrhne5oopoops
500+oops
start <-  strptime("04/10/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end - start
## days ##
2+ (end-start)/7  #weeks
start <-  strptime("04/10/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("15/05/15 14:00", "%d/%m/%y %H:%M")
end - start
## days ##
2+ (end-start)/7  #weeks
start <-  strptime("04/10/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("18/05/15 14:00", "%d/%m/%y %H:%M")
end - start
## days ##
2+ (end-start)/7  #weeks
start <-  strptime("4/10/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end - start
## days ##
2+ (end-start)/7  #weeks
start <-  strptime("4/10/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end - start
start <-  strptime("12/08/14 14:00", "%d/%m/%y %H:%M")
end <-    strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end - start
start <-  strptime("12/08/15 14:00", "%d/%m/%y %H:%M")
end <-    strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end - start
start <-  strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end <-    strptime("20/08/15 14:00", "%d/%m/%y %H:%M")
start <-  strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end <-    strptime("20/08/15 14:00", "%d/%m/%y %H:%M")
end - start
start <-  strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end <-    strptime("01/06/15 14:00", "%d/%m/%y %H:%M")
end - start
31-12
31-12+2
---
start <-  strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end <-    strptime("26/06/15 14:00", "%d/%m/%y %H:%M")
end - start
(end-start)/7
start <-  strptime("12/05/15 14:00", "%d/%m/%y %H:%M")
end <-    strptime("20/08/15 14:00", "%d/%m/%y %H:%M")
end - start
start <-  strptime("18/08/15 14:00", "%d/%m/%y %H:%M")
#start <-  strptime("09/10/08 14:00", "%d/%m/%y %H:%M")
end <-  strptime("10/12/15 14:00", "%d/%m/%y %H:%M")
(end-start)/7 #weeks
60E3
60E3*0.05
30E3*0.05
30E3*0.01
?solve
example(solve)
x = 1:10
y <<- x
y
x
y = 1
x
makeVector = function( x = numeric()){
m = NULL
set = function(y) {
x <<- y
m <<- NULL
}
get <- function()x
setmean <- function(mean) m <<- mean
getmean <- function() m
list( set = set, get=get,
setmean = setmean,
getmean=getmean)
}
makeVecotr
makeVector
makeVector()
makeVector(1:10)
makeVector()
makeVector(2:20)
makeVector(x=2:20)
y = makeVector( 2:20)
y
str(y)
y$set()
y$set(x)
str(y)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
N=5E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=5E5
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E5
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
# Cancer mutation: A simple simulation exercise for BIO125
Basic parameters
```{r}
CellTypes = c(0,1,2)
```
*CellTypes*: 0 for wildtype, 1 for mutant, and 2 for cancer cells.
```{r}
TotalCells = 1E3
```
*TotalCells* means the number of cells, including wildtype, mutant, and cancer cells.
```{r}
CurrentCells = seq(0, TotalCells)
```
*CurrentCells* represent the current number and type of cells.
```{r}
Generations = c(1E3, 1E4, 1E5, 1E6, 1E7, 1E8)
```
*Generations* represent how many times cells with replicate.
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1+2
2^12
log2(16)
x = seq(1:10)
x
y = x + 2
y
plot( y ~ x)
1+2
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE2627", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
sml <- c("G1","G1","G0","G0");
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","CLONE_ID","SPOT_ID"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE2627", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
sml <- c("G1","G1","G0","G0")
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("TR","CTL")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE2627", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
library(foreach)
library(doMC)
gset <- getGEO(filename="GSE32719_series_matrix.txt.gz")
# make proper column names to match toptable
# fvarLabels(gset) <- make.names(fvarLabels(gset))
ex= exprs(gset)
apply( ex, 2, median)
means = apply( ex, 2, mean)
means
boxplot( ex )
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean) / scale
apply( ex, 2, median) /scale
boxplot( ex )
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design[1:3,]
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:3,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
sample.letters = as.factor( LETTERS[1:length(sample.names)])
names(sample.letters) = sample.names
# set up the data and proceed with analysis
sample.letters[ experimental_design$source_name_ch1 ]
fl <- as.factor( sample.letters[experimental_design$source_name_ch1 ] )
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
#A-B-C does not look right?
cont.matrix <- makeContrasts(A-B-C, levels=design)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
# replace original platform annotation
tT <- tT[setdiff(colnames(tT), setdiff(fvarLabels(gset), "ID"))]
tT <- merge(tT, ncbifd, by="ID")
tT <- tT[order(tT$P.Value), ]  # restore correct order
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT[1:10, ]
sample.names = unique(experimental_design$source_name_ch1)
mylevels = c(1,2,3)
names(mylevels) = sample.names
gset.levels = mylevels[ experimental_design$source_name_ch1 ]
my.pvalues = numeric(length=length(ex[,1]))
# x2 = foreach(i=1:(3*2), .combine='cbind') %dopar% sqrt(i)
registerDoMC(cores=4)
#my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
row.names(my.pvalues) = row.names(gset@assayData$exprs)
hist(my.pvalues)
summary(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues, "BH")
hist(my.pvalues.BH)
summary(my.pvalues.BH)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
names(sig)
sig= data.frame(sig)
sig$ID = row.names(sig)
#ncbifd[ match(names(sig), as.character( ncbifd$ID) ),  ]
sig2 = merge(sig, ncbifd, by="ID")
#sig.genes = unique(sig2$Gene.symbol)
sig.geneIDs = unique(sig2$Gene.ID)
write.table(sig.geneIDs, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
library(topGO)
?new
sig.genes = unique(sig2$Gene.symbol)
#sig.geneIDs = unique(sig2$Gene.ID)
write.table(sig.genes, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
names(sig)
sig= data.frame(sig)
sig$ID = row.names(sig)
#ncbifd[ match(names(sig), as.character( ncbifd$ID) ),  ]
sig2 = merge(sig, ncbifd, by="ID")
View(sig)
ncbifd
merge(sig, ncbifd, by="ID")
View(sig)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
names(sig) = row.names(gset@assayData$exprs)
my.pvalues.BH = p.adjust(my.pvalues, "BH")
names(my.pvalues.BH) = row.names(gset@assayData$exprs)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
sig= data.frame(sig)
sig$ID = row.names(sig)
sig= data.frame(sig)
sig$ID = row.names(sig)
#ncbifd[ match(names(sig), as.character( ncbifd$ID) ),  ]
sig2 = merge(sig, ncbifd, by="ID")
sig.genes = unique(sig2$Gene.symbol)
#sig.geneIDs = unique(sig2$Gene.ID)
write.table(sig.genes, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
background.genes = unique( ncbifd$Gene.symbol)
write.table(background.genes, "__background.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
setwd("~/github/GSE15936_yeast_stress")
setwd("~/github/GSE15936_yeast_stress")
library(Biobase)
library(GEOquery)
library(limma)
library(foreach)
library(doMC)
gset <- getGEO("GSE15936", GSEMatrix =TRUE)
gset <- getGEO(filename="GSE15936_series_matrix.txt.gz")
make.names(fvarLabels(gset))
fvarLabels(gset)
ex= exprs(gset)
apply( ex, 2, median)
means = apply( ex, 2, mean)
means
boxplot( ex )
?boxplot
head(ex)
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
gpl
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean) / scale
boxplot( ex )
apply( ex, 2, median) /scale
scale
apply( ex, 2, median)
?apply
means = apply(ex, 2, mean)
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean) / scale
apply( ex, 2, median)
boxplot( ex )
str(gset)
rm(list=ls())
setwd("~/github/GSE15936_yeast_stress")
library(Biobase)
library(GEOquery)
library(limma)
library(foreach)
library(doMC)
gset <- getGEO(filename="GSE15936_series_matrix.txt.gz")
gset <- getGEO(filename="GSE15936_series_matrix.txt.gz")
ex= exprs(gset)
boxplot( ex )
?boxplot()
means = apply(ex, 2, mean)
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean) / scale
apply( ex, 2, median)
boxplot( ex )
gset@phenoData@data
gset@phenoData@data
str(experimental_design)
experimental_design = gset@phenoData@data #These should contain experiment meta info
str(experimental_design)
experimental_design = gset@phenoData@data #These should contain experiment meta info
experimental_design[1:3,]
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:3,  c("title", "source_name_ch1")]
experimental_design[5:8,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
unique( experimental_design$title )
Load NCBI platform annotation
```{r, message=FALSE}
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
```
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
experimental_design$title
experimental_design$title[grep("Oxidative streee, t", experimental_design$title)]
experimental_design$title[grep("Oxidative streee", experimental_design$title)]
experimental_design$title[grep("Oxidative stress,", experimental_design$title)]
experimental_design$title[grep("Oxidative stress, t", experimental_design$title)]
experimental_design$title
experimental_design$title[grep("Oxidative stress, t", experimental_design$title)]
selected = c(1, 2, grep("Oxidative stress, t", experimental_design$title))
selected
head(ex)
ex = ex[, selected]
head(ex)
experimental_design$title[grep("Oxidative stress, t", experimental_design$title)]
mylevels = c(0,0,15,30,45,90)
str(ex)
mylevels = c(0,0,15,30,45,90)
names(mylevels) = sample.names
my.pvalues = numeric(length=length(ex[,1]))
# x2 = foreach(i=1:(3*2), .combine='cbind') %dopar% sqrt(i)
registerDoMC(cores=4)
my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
#my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ mylevels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
mylevels = c(0,0,15,30,45,90)
names(mylevels) = c("0","0", "15","30","45","90")
my.pvalues = numeric(length=length(ex[,1]))
# x2 = foreach(i=1:(3*2), .combine='cbind') %dopar% sqrt(i)
registerDoMC(cores=4)
my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
#my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ mylevels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
my.pvalues
row.names(my.pvalues) = row.names(gset@assayData$exprs)
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ mylevels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
row.names(my.pvalues) = row.names(gset@assayData$exprs)
str(ncbifd)
ncbifd[1:10,]
head(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues, "BH")
names(my.pvalues.BH) = row.names(gset@assayData$exprs)
hist(my.pvalues.BH)
summary(my.pvalues.BH)
summary(my.pvalues)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
sig= data.frame(sig)
sig$ID = row.names(sig)
View(sig)
sig= my.pvalues.BH[my.pvalues.BH < 0.1]
sig= data.frame(sig)
sig$ID = row.names(sig)
View(sig)
sig= my.pvalues.BH[my.pvalues.BH < 0.3]
sig= data.frame(sig)
View(sig)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
sig= data.frame(sig)
sig$ID = row.names(sig)
sig2 = merge(sig, ncbifd, by="ID")
View(sig2)
